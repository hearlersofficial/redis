name: Deploy Redis to Development

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Cache Helm charts
        uses: actions/cache@v4
        with:
          path: "helm/redis/charts"
          key: ${{ runner.os }}-helm-${{ hashFiles('**/Chart.lock') }}
          restore-keys: |
            ${{ runner.os }}-helm-

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Update Helm dependencies
        run: helm dependency update ./helm/redis

      - name: Lint Helm chart
        run: helm lint ./helm/redis

      - name: Configure SSH and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Install k3s on remote server if not exists
        run: |
          ssh ${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }} '
            if [ ! -f /usr/local/bin/k3s ]; then
              echo "k3s not found. Installing..."
              curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 --tls-san ${{ secrets.DEV_SSH_HOST }}
            else
              echo "k3s is already installed."
            fi
          '

      - name: Fetch, modify, and secure Kubeconfig
        run: |
          ssh ${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }} 'cat /etc/rancher/k3s/k3s.yaml' | sed "s/127.0.0.1/${{ secrets.DEV_SSH_HOST }}/" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml

      - name: Handle potential Helm lock
        run: |
          # Use set +e to prevent the script from exiting if helm status fails (e.g., on first run)
          set +e
          STATUS_OUTPUT=$(helm status redis-dev --namespace development --kubeconfig ./kubeconfig.yaml)
          EXIT_CODE=$?
          set -e

          # Check if the release exists and is in a pending state, then uninstall it
          if [ $EXIT_CODE -eq 0 ] && (echo "$STATUS_OUTPUT" | grep -q "STATUS: pending-"); then
            echo "Helm release 'redis-dev' is in a pending state. Uninstalling the release to unlock."
            helm uninstall redis-dev --namespace development --kubeconfig ./kubeconfig.yaml
            echo "Waiting for uninstall to complete..."
            sleep 15
          else
            echo "Helm release 'redis-dev' is in a stable state or does not exist. Proceeding."
          fi

      - name: Deploy Redis with Helm
        run: |
          helm upgrade --install redis-dev ./helm/redis \
            --kubeconfig ./kubeconfig.yaml \
            -f ./helm/redis/values-development.yaml \
            --namespace development \
            --create-namespace \
            --wait

      - name: Test Helm deployment
        run: |
          # Wait a bit for all services to be fully operational before testing
          sleep 30
          helm test redis-dev \
            --kubeconfig ./kubeconfig.yaml \
            --namespace development
